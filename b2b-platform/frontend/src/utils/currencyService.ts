// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ API open.er-api.com
interface ExchangeRateResponse {
  result: string;
  base_code: string;
  rates: {
    [key: string]: number;
  };
}

interface CachedRates {
  rates: { [key: string]: number };
  timestamp: number;
  baseCurrency: string;
}

// –í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è - 4 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const CACHE_DURATION = 4 * 60 * 60 * 1000;

// –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
const CACHE_KEY_PREFIX = 'exchange_rates_';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –∫–µ—à–∞ localStorage
 */
function getCachedRates(baseCurrency: string): CachedRates | null {
  try {
    const cacheKey = CACHE_KEY_PREFIX + baseCurrency;
    const cached = localStorage.getItem(cacheKey);
    if (!cached) return null;

    const parsedCache: CachedRates = JSON.parse(cached);
    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ –∫–µ—à
    if (now - parsedCache.timestamp > CACHE_DURATION) {
      localStorage.removeItem(cacheKey);
      return null;
    }

    return parsedCache;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ –∫–µ—à localStorage
 */
function setCachedRates(baseCurrency: string, rates: { [key: string]: number }): void {
  try {
    const cacheKey = CACHE_KEY_PREFIX + baseCurrency;
    const cacheData: CachedRates = {
      rates,
      timestamp: Date.now(),
      baseCurrency
    };
    localStorage.setItem(cacheKey, JSON.stringify(cacheData));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API open.er-api.com (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–µ–∑ –∫–ª—é—á–∞)
 */
async function fetchExchangeRates(baseCurrency: string): Promise<{ [key: string]: number } | null> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = getCachedRates(baseCurrency);
    if (cached) {
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è ${baseCurrency}`);
      return cached.rates;
    }

    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è ${baseCurrency} —Å API`);
    const response = await fetch(`https://open.er-api.com/v6/latest/${baseCurrency}`);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: ExchangeRateResponse = await response.json();

    if (data.result !== 'success') {
      throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setCachedRates(baseCurrency, data.rates);

    return data.rates;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
    return null;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥–∏–µ
 */
export async function convertPrice(
  price: number,
  fromCurrency: string,
  targetCurrencies: string[]
): Promise<{ [key: string]: number } | null> {
  try {
    const rates = await fetchExchangeRates(fromCurrency);
    if (!rates) return null;

    const result: { [key: string]: number } = {};

    for (const targetCurrency of targetCurrencies) {
      if (fromCurrency === targetCurrency) {
        // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π
        result[targetCurrency] = price;
      } else if (rates[targetCurrency]) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∫—É—Ä—Å
        result[targetCurrency] = price * rates[targetCurrency];
      } else {
        console.warn(`–ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã ${targetCurrency} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        result[targetCurrency] = 0;
      }
    }

    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç:', error);
    return null;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –≤–∞–ª—é—Ç
 */
export function formatPriceWithCurrency(price: number, currency: string): string {
  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const roundedPrice = Math.round(price * 100) / 100;

  switch (currency) {
    case 'KZT':
      return `${roundedPrice.toLocaleString()} ‚Ç∏`;
    case 'RUB':
      return `${roundedPrice.toLocaleString()} ‚ÇΩ`;
    case 'USD':
      return `${roundedPrice.toLocaleString()} $`;
    default:
      return `${roundedPrice.toLocaleString()} ${currency}`;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –≤ —Ç—Ä—ë—Ö –≤–∞–ª—é—Ç–∞—Ö
 */
export async function formatPrice(price: number, currency: string): Promise<string> {
  try {
    // –¶–µ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    const targetCurrencies = ['KZT', 'RUB', 'USD'];

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
    const convertedPrices = await convertPrice(price, currency, targetCurrencies);

    if (!convertedPrices) {
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É
      return `üè∑Ô∏è ${formatPriceWithCurrency(price, currency)}`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
    const formattedPrices = targetCurrencies
      .map(curr => formatPriceWithCurrency(convertedPrices[curr], curr))
      .join(' | ');

    return `üè∑Ô∏è ${formattedPrices}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É
    return `üè∑Ô∏è ${formatPriceWithCurrency(price, currency)}`;
  }
}